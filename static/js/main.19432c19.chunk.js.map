{"version":3,"sources":["Images/logo.png","credentials/Firebase.js","components/login/Login.js","components/menu/Navbar.js","components/menu/Menu.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","credentials","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","Login","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","login","bind","assertThisInitialized","handleChange","state","email","password","e","preventDefault","auth","signInWithEmailAndPassword","then","catch","error","errorCode","code","errorMessage","message","console","log","setState","defineProperty","target","name","value","react_default","a","createElement","className","src","logo","alt","for","onChange","type","id","placeholder","onClick","Component","Navbar","logout","signOut","width","data-toggle","data-target","aria-controls","aria-expanded","aria-label","href","Menu","components_menu_Navbar","App","user","authListener","_this2","onAuthStateChanged","components_menu_Menu","components_login_Login","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.19432c19.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.25728321.png\";","import firebase from 'firebase';\r\n\r\nconst configuration = {\r\n    apiKey: \"AIzaSyCVGDlQ11ButLCHMlmiuQBferdmMgt11RY\",\r\n    authDomain: \"burguermix-pwa.firebaseapp.com\",\r\n    databaseURL: \"https://burguermix-pwa.firebaseio.com\",\r\n    projectId: \"burguermix-pwa\",\r\n    storageBucket: \"burguermix-pwa.appspot.com\",\r\n    messagingSenderId: \"416388489994\"\r\n}\r\n\r\nconst credentials = firebase.initializeApp(configuration);\r\n\r\nexport default credentials;","import React, { Component} from 'react';\r\nimport credentials from '../../credentials/Firebase'\r\n\r\n\r\n// Assets\r\nimport './Login.css';\r\nimport logo from '../../Images/logo.png'\r\n\r\nclass Login extends Component {\r\n    constructor (props) {\r\n        super(props);\r\n        this.login = this.login.bind(this);\r\n        this.handleChange = this.handleChange.bind(this);\r\n        this.state = {\r\n            email: '',\r\n            password: ''\r\n        }\r\n    }\r\n\r\n\r\n    login(e) {\r\n        e.preventDefault();\r\n        credentials.auth().signInWithEmailAndPassword(this.state.email, this.state.password).then(function() {\r\n        }).catch((error)=>{\r\n        // Mensaje en consola si existe error de inicio de sesion\r\n          let errorCode = error.code;\r\n          let errorMessage = error.message;\r\n          console.log(errorCode);\r\n          console.log(errorMessage);\r\n        });\r\n    }\r\n\r\n\r\n\r\n        handleChange(e){\r\n        this.setState({ [e.target.name]: e.target.value});\r\n    }\r\n\r\n\r\n    render() {\r\n        return (\r\n            <main className=\"container\">\r\n                <div className=\"contenedor\">\r\n                    <section className=\"col-sm\">\r\n                        <img className=\"form-logo\" src={logo} alt=\"Mi-Saz칩n\"></img>\r\n                    </section>\r\n                    <section className=\"\">\r\n                        <formgroup>\r\n                            <label for=\"exampleEmail\">Correo electr칩nico</label>\r\n                            <input value={this.state.email} onChange={this.handleChange} type=\"email\" name=\"email\" id=\"exampleEmail\" className=\"form-control form-input\" placeholder=\"usuario@example.com\" />\r\n                        </formgroup>\r\n                        <formgroup>\r\n                            <label for=\"examplePassword\">Contrase침a</label>\r\n                            <input value={this.state.password} onChange={this.handleChange} type=\"password\" name=\"password\" id=\"examplePassword\" className=\"form-control form-input\"/>\r\n                        </formgroup>\r\n                    </section>\r\n                    <section className=\"btn btn-warning btn-block form-button mt-3\">\r\n                        <button type=\"submit\" onClick={this.login} className=\"btn-warning \">Iniciar sesi칩n</button>\r\n                    </section>\r\n      \r\n                </div>\r\n   \r\n                \r\n            </main>\r\n            \r\n        );\r\n    }\r\n}\r\n\r\n\r\nexport default Login;","import React, { Component } from 'react';\r\nimport credentials from '../../credentials/Firebase'\r\n\r\n// Assets\r\nimport logo from '../../Images/logo.png'\r\nimport './Navbar.css';\r\n\r\n\r\nclass Navbar extends Component {\r\n    constructor (props) {\r\n        super(props);\r\n        this.logout = this.logout.bind(this);\r\n    }\r\n    \r\n    \r\n    \r\n    logout(){\r\n        credentials.auth().signOut();\r\n    }\r\n\r\n    render() {\r\n      return (\r\n        <nav className=\"navbar navbar-expand-lg navbar-light navbar-style\">\r\n            <a className=\"navbar-brand\">\r\n            <img src={logo} width=\"74px\" alt=\"logo-mi-sazon\" />\r\n            </a>\r\n            <button className=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarColor03\" aria-controls=\"navbarColor03\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n                <span className=\"navbar-toggler-icon\"></span>\r\n            </button>\r\n            <div className=\"collapse navbar-collapse\" id=\"navbarColor03\">\r\n                <ul className=\"navbar-nav mr-auto\">\r\n                    <li className=\"nav-item active\">\r\n                        <div className=\"btn-group\">\r\n                            <button id=\"userHome\" type=\"button\" className=\"btn btn-dark\" href=\"view1.html\" >Home <span className=\"sr-only\">(current)</span></button>\r\n                            <button id=\"userProfile\" type=\"button\" className=\"btn btn-dark\" data-toggle=\"modal\" data-target=\"#exampleModalCenter\">Mi Perfil</button>\r\n                            <button onClick={this.logout} id=\"userExit\" type=\"button\" className=\"btn btn-dark\" >Salir</button>\r\n                        </div>\r\n                    </li>\r\n                </ul>\r\n            </div>\r\n            <form className=\"form-inline my-2 my-lg-0\">\r\n                <span className=\"navbar-text\">Bienvenid@</span>\r\n            </form>\r\n        </nav>\r\n    );\r\n  }\r\n}\r\n  export default Navbar;","import React, { Component } from 'react';\r\nimport credentials from '../../credentials/Firebase'\r\nimport Navbar from './Navbar'\r\n\r\nimport './Menu.css';\r\n\r\nclass Menu extends Component {\r\n   \r\n  \r\n  render() {\r\n    return (\r\n      <div className=\"menu\">\r\n        <div><Navbar/></div>\r\n\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Menu;\r\n","import React, { Component } from 'react';\nimport './App.css';\nimport credentials from './credentials/Firebase'\nimport Login from './components/login/Login';\nimport Menu from './components/menu/Menu';\n\nclass App extends Component {\n  constructor (props) {\n    super(props);\n    this.state = {\n        user:{},\n    }\n    this.authListener = this.authListener.bind(this)\n  }\n\n  componentDidMount(){\n    this.authListener();\n  }\n\n  authListener () {\n    credentials.auth().onAuthStateChanged((user) => {\n        // console.log(user);\n      if (user) {\n        console.log('existe usuario activo');\n        // User is signed in.\n        this.setState({ user });\n      } else {\n        console.log('no existe usuario activo');\n      // User is signed out.\n      this.setState({ user:null });\n      }\n    });\n  };\n  \n  \n  render() {\n    return (\n      <div className=\"App\">\n        <div>\n        {/* <Login/> */}\n          {this.state.user ? (<Menu user ={this.state.user}/>) : (<Login/>)}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}